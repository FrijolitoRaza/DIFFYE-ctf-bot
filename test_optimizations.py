#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script de prueba para verificar las optimizaciones implementadas
"""

import asyncio
import logging
import os
import sys
from datetime import datetime
from dotenv import load_dotenv

# Configurar el event loop para Windows
if os.name == 'nt':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_database_connection():
    """Prueba la conexi√≥n a la base de datos"""
    try:
        from database_manager import db_manager
        
        logger.info("üîå Probando conexi√≥n a base de datos...")
        
        # Inicializar pool as√≠ncrono
        await db_manager.initialize()
        
        # Probar conexi√≥n as√≠ncrona
        async with db_manager.get_connection() as conn:
            result = await conn.fetchval("SELECT 1 as test")
            logger.info(f"‚úÖ Conexi√≥n as√≠ncrona: {result}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en conexi√≥n a BD: {e}")
        return False

async def test_database_operations():
    """Prueba las operaciones de base de datos"""
    try:
        from database_manager import Database
        
        logger.info("üìä Probando operaciones de base de datos...")
        
        # Crear tablas
        success = await Database.init_db()
        if not success:
            logger.error("‚ùå Error inicializando BD")
            return False
        
        # Probar registro de usuario
        user_id = 999999999
        success = await Database.register_user(user_id, "test_user", "Usuario de Prueba")
        if not success:
            logger.error("‚ùå Error registrando usuario")
            return False
        logger.info("‚úÖ Usuario registrado correctamente")
        
        # Probar verificaci√≥n de flag
        result = await Database.check_flag(user_id, 0, "FLAG{INICIO_INVESTIGACION}")
        if result not in ["correct", "already_completed"]:
            logger.error(f"‚ùå Error verificando flag: {result}")
            return False
        logger.info(f"‚úÖ Flag verificada correctamente. Resultado: {result}")
        
        # Probar obtenci√≥n de progreso
        progress = await Database.get_user_progress(user_id)
        if not progress or not progress['stats']:
            logger.error("‚ùå Error obteniendo progreso")
            return False
        logger.info("‚úÖ Progreso obtenido correctamente")
        
        # Probar leaderboard
        leaderboard = await Database.get_leaderboard()
        logger.info(f"‚úÖ Leaderboard obtenido: {len(leaderboard)} usuarios")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en operaciones de BD: {e}")
        return False

def test_utilities():
    """Prueba las utilidades"""
    try:
        from utils_file import (
            validate_flag_format, sanitize_input, hash_flag,
            calculate_score, format_time_remaining, generate_progress_bar
        )
        
        logger.info("üõ†Ô∏è Probando utilidades...")
        
        # Probar validaci√≥n de flags
        valid_flag = "FLAG{TEST}"
        invalid_flag = "invalid_flag"
        
        if not validate_flag_format(valid_flag):
            logger.error("‚ùå Error validando flag v√°lida")
            return False
        if validate_flag_format(invalid_flag):
            logger.error("‚ùå Error validando flag inv√°lida")
            return False
        logger.info("‚úÖ Validaci√≥n de flags funciona correctamente")
        
        # Probar sanitizaci√≥n
        dirty_input = "<script>alert('xss')</script>"
        clean_input = sanitize_input(dirty_input)
        if "<script>" in clean_input:
            logger.error("‚ùå Error en sanitizaci√≥n")
            return False
        logger.info("‚úÖ Sanitizaci√≥n funciona correctamente")
        
        # Probar hash
        flag_hash = hash_flag(valid_flag)
        if not flag_hash or len(flag_hash) != 64:
            logger.error("‚ùå Error generando hash")
            return False
        logger.info("‚úÖ Hash generado correctamente")
        
        # Probar c√°lculo de puntaje
        score = calculate_score(1, 3, 120)
        if score <= 0:
            logger.error("‚ùå Error calculando puntaje")
            return False
        logger.info(f"‚úÖ Puntaje calculado: {score}")
        
        # Probar formateo de tiempo
        now = datetime.now()
        future = datetime(now.year, now.month, now.day + 1, now.hour, now.minute)
        time_str = format_time_remaining(future, now)
        if not time_str:
            logger.error("‚ùå Error formateando tiempo")
            return False
        logger.info(f"‚úÖ Tiempo formateado: {time_str}")
        
        # Probar barra de progreso
        progress_bar = generate_progress_bar(3, 5, 10)
        if not progress_bar or "üü©" not in progress_bar:
            logger.error("‚ùå Error generando barra de progreso")
            return False
        logger.info(f"‚úÖ Barra de progreso: {progress_bar}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en utilidades: {e}")
        return False

async def test_bot_functions():
    """Prueba las funciones del bot"""
    try:
        from bot import CHALLENGES, START_DATE, END_DATE
        
        logger.info("ü§ñ Probando funciones del bot...")
        
        # Verificar configuraci√≥n de desaf√≠os
        if not CHALLENGES or len(CHALLENGES) != 6:
            logger.error("‚ùå Error en configuraci√≥n de desaf√≠os")
            return False
        logger.info(f"‚úÖ {len(CHALLENGES)} desaf√≠os configurados")
        
        # Verificar fechas
        if START_DATE >= END_DATE:
            logger.error("‚ùå Error en fechas del evento")
            return False
        logger.info(f"‚úÖ Fechas del evento: {START_DATE.strftime('%d/%m/%Y')} - {END_DATE.strftime('%d/%m/%Y')}")
        
        # Verificar estructura de desaf√≠os
        for challenge_id, challenge in CHALLENGES.items():
            required_fields = ['title', 'description', 'flag', 'available_date']
            for field in required_fields:
                if field not in challenge:
                    logger.error(f"‚ùå Campo {field} faltante en desaf√≠o {challenge_id}")
                    return False
        logger.info("‚úÖ Estructura de desaf√≠os correcta")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en funciones del bot: {e}")
        return False

async def test_performance():
    """Prueba el rendimiento del pool de conexiones"""
    try:
        from database_manager import db_manager
        
        logger.info("‚ö° Probando rendimiento del pool...")
        
        # Probar m√∫ltiples conexiones concurrentes
        async def test_connection():
            async with db_manager.get_connection() as conn:
                result = await conn.fetchval("SELECT 1")
                return result
        
        # Ejecutar 10 conexiones concurrentes
        tasks = [test_connection() for _ in range(10)]
        start_time = datetime.now()
        results = await asyncio.gather(*tasks)
        end_time = datetime.now()
        
        duration = (end_time - start_time).total_seconds()
        logger.info(f"‚úÖ 10 conexiones concurrentes en {duration:.2f} segundos")
        
        # Verificar que todas las conexiones funcionaron
        if not all(result == 1 for result in results):
            logger.error("‚ùå Error en conexiones concurrentes")
            return False
        
        logger.info("‚úÖ Pool de conexiones funciona correctamente")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Error en prueba de rendimiento: {e}")
        return False

async def main():
    """Funci√≥n principal de pruebas"""
    logger.info("üß™ Iniciando pruebas de optimizaciones...")
    
    # Cargar variables de entorno
    load_dotenv()
    
    # Verificar variables de entorno requeridas
    required_vars = ['DATABASE_URL']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"‚ùå Variables de entorno faltantes: {missing_vars}")
        logger.info("Configura las variables en tu archivo .env")
        return False
    
    tests = [
        ("Conexi√≥n a BD", test_database_connection),
        ("Operaciones de BD", test_database_operations),
        ("Utilidades", test_utilities),
        ("Funciones del Bot", test_bot_functions),
        ("Rendimiento", test_performance)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüîç Ejecutando: {test_name}")
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                logger.info(f"‚úÖ {test_name}: PAS√ì")
                passed += 1
            else:
                logger.error(f"‚ùå {test_name}: FALL√ì")
        except Exception as e:
            logger.error(f"‚ùå {test_name}: ERROR - {e}")
    
    logger.info(f"\nüìä Resultados: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        logger.info("üéâ ¬°Todas las optimizaciones funcionan correctamente!")
        return True
    else:
        logger.error("‚ö†Ô∏è Algunas pruebas fallaron. Revisa los logs.")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)